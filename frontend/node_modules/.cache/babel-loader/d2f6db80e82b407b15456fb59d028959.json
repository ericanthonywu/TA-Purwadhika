{"ast":null,"code":"var _jsxFileName = \"/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/template/CheckToken.jsx\";\nimport React, { Component } from \"react\";\nimport Error404 from \"./404\";\nimport axios from 'axios';\nimport { api_url } from \"../../global\";\nimport { connect } from 'react-redux';\nimport { updateToken, logout } from \"../../redux/actions\";\nimport { toast } from \"react-toastify\";\nexport const withAuth = ComponentToProtect => {\n  class CheckToken extends Component {\n    constructor(a) {\n      super(a);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.token) {\n        axios.post(\"\".concat(api_url, \"checktoken\"), {\n          token: nextProps.token\n        }).then(async res => {\n          const loadData = () => {\n            this.props.updateToken({\n              token: res.data.token\n            });\n            localStorage.setItem('token', res.data.token);\n          };\n\n          await loadData();\n          this.setState({\n            loggedin: true\n          });\n        }).catch(err => {\n          nextProps.logout();\n          this.setState({\n            loggedin: false\n          });\n        });\n      } else {\n        nextProps.logout();\n        this.setState({\n          loggedin: false\n        });\n      }\n    } // componentWillMount() {\n    //     if (this.props.token) {\n    //         axios.post(`${api_url}checktoken`, {\n    //             token: this.props.token\n    //         }).then(async res => {\n    //             const loadData = () => {\n    //                 this.props.updateToken({\n    //                     token: res.data.token\n    //                 });\n    //                 localStorage.setItem('token', res.data.token);\n    //             };\n    //             await loadData();\n    //             this.setState({\n    //                 loggedin: true\n    //             })\n    //         })\n    //             .catch(err => {\n    //                 this.props.logout();\n    //                 this.setState({loggedin: false})\n    //             })\n    //     }else{\n    //         this.props.logout();\n    //         this.setState({loggedin: false})\n    //     }\n    // }\n\n\n    componentWillMount() {\n      this.setState({\n        loggedin: localStorage.getItem('token')\n      });\n    } // async checktoken(){\n    //     if (this.props.token) {\n    //         axios.post(`${api_url}checktoken`, {\n    //             token: this.props.token\n    //         }).then(async res => {\n    //             const loadData = () => {\n    //                 this.props.updateToken({\n    //                     token: res.data.token\n    //                 });\n    //                 localStorage.setItem('token', res.data.token);\n    //             };\n    //             await loadData();\n    //             return true\n    //         })\n    //             .catch(async err => {\n    //                 await this.props.logout();\n    //                 return false;\n    //             })\n    //     }else{\n    //         await this.props.logout();\n    //         return false\n    //     }\n    // }\n\n\n    render() {\n      // new Promise((resolve, reject) => {\n      //     resolve(this.checktoken())\n      // }).then(check => {\n      if (this.state.loggedin) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        })));\n      } else {\n        return React.createElement(Error404, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n      } // });\n\n    }\n\n  }\n\n  const mapStateToProps = state => ({\n    token: state.user.token\n  });\n\n  return connect(mapStateToProps, {\n    updateToken,\n    logout\n  })(CheckToken);\n};","map":{"version":3,"sources":["/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/template/CheckToken.jsx"],"names":["React","Component","Error404","axios","api_url","connect","updateToken","logout","toast","withAuth","ComponentToProtect","CheckToken","constructor","a","componentWillReceiveProps","nextProps","nextContext","token","post","then","res","loadData","props","data","localStorage","setItem","setState","loggedin","catch","err","componentWillMount","getItem","render","state","mapStateToProps","user"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,EAAqBC,MAArB,QAAkC,qBAAlC;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,kBAAkB,IAAI;AAC1C,QAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAC/BW,IAAAA,WAAW,CAACC,CAAD,EAAI;AACX,YAAMA,CAAN;AACH;;AAEDC,IAAAA,yBAAyB,CAACC,SAAD,EAAYC,WAAZ,EAA0B;AAC/C,UAAID,SAAS,CAACE,KAAd,EAAqB;AACjBd,QAAAA,KAAK,CAACe,IAAN,WAAcd,OAAd,iBAAmC;AAC/Ba,UAAAA,KAAK,EAAEF,SAAS,CAACE;AADc,SAAnC,EAGKE,IAHL,CAGU,MAAMC,GAAN,IAAa;AACf,gBAAMC,QAAQ,GAAG,MAAM;AACnB,iBAAKC,KAAL,CAAWhB,WAAX,CAAuB;AACnBW,cAAAA,KAAK,EAAEG,GAAG,CAACG,IAAJ,CAASN;AADG,aAAvB;AAGAO,YAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,GAAG,CAACG,IAAJ,CAASN,KAAvC;AACH,WALD;;AAMA,gBAAMI,QAAQ,EAAd;AACA,eAAKK,QAAL,CAAc;AACVC,YAAAA,QAAQ,EAAE;AADA,WAAd;AAGH,SAdL,EAeKC,KAfL,CAeWC,GAAG,IAAI;AACVd,UAAAA,SAAS,CAACR,MAAV;AACA,eAAKmB,QAAL,CAAc;AAACC,YAAAA,QAAQ,EAAE;AAAX,WAAd;AACH,SAlBL;AAmBH,OApBD,MAoBK;AACDZ,QAAAA,SAAS,CAACR,MAAV;AACA,aAAKmB,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAd;AACH;AACJ,KA9B8B,CA+B/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,IAAAA,kBAAkB,GAAG;AACjB,WAAKJ,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEH,YAAY,CAACO,OAAb,CAAqB,OAArB;AADA,OAAd;AAGH,KA7D8B,CA+D/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,IAAAA,MAAM,GAAG;AACL;AACA;AACA;AACI,UAAI,KAAKC,KAAL,CAAWN,QAAf,EAAyB;AACrB,eACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,kBAAD,oBAAwB,KAAKL,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CADJ;AAKH,OAND,MAMO;AACH,eAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAZA,CAcL;;AACH;;AAtG8B;;AAyGnC,QAAMY,eAAe,GAAGD,KAAK,KAAK;AAC9BhB,IAAAA,KAAK,EAAEgB,KAAK,CAACE,IAAN,CAAWlB;AADY,GAAL,CAA7B;;AAIA,SAAOZ,OAAO,CAAC6B,eAAD,EAAkB;AAAC5B,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAlB,CAAP,CAAgDI,UAAhD,CAAP;AACH,CA/GM","sourcesContent":["import React, {Component} from \"react\";\nimport Error404 from \"./404\";\nimport axios from 'axios'\nimport {api_url} from \"../../global\";\nimport {connect} from 'react-redux'\nimport {updateToken, logout} from \"../../redux/actions\";\nimport {toast} from \"react-toastify\";\n\nexport const withAuth = ComponentToProtect => {\n    class CheckToken extends Component {\n        constructor(a) {\n            super(a);\n        }\n\n        componentWillReceiveProps(nextProps, nextContext)  {\n            if (nextProps.token) {\n                axios.post(`${api_url}checktoken`, {\n                    token: nextProps.token\n                })\n                    .then(async res => {\n                        const loadData = () => {\n                            this.props.updateToken({\n                                token: res.data.token\n                            });\n                            localStorage.setItem('token', res.data.token);\n                        };\n                        await loadData();\n                        this.setState({\n                            loggedin: true\n                        })\n                    })\n                    .catch(err => {\n                        nextProps.logout();\n                        this.setState({loggedin: false})\n                    })\n            }else{\n                nextProps.logout();\n                this.setState({loggedin: false})\n            }\n        }\n        // componentWillMount() {\n        //     if (this.props.token) {\n        //         axios.post(`${api_url}checktoken`, {\n        //             token: this.props.token\n        //         }).then(async res => {\n        //             const loadData = () => {\n        //                 this.props.updateToken({\n        //                     token: res.data.token\n        //                 });\n        //                 localStorage.setItem('token', res.data.token);\n        //             };\n        //             await loadData();\n        //             this.setState({\n        //                 loggedin: true\n        //             })\n        //         })\n        //             .catch(err => {\n        //                 this.props.logout();\n        //                 this.setState({loggedin: false})\n        //             })\n        //     }else{\n        //         this.props.logout();\n        //         this.setState({loggedin: false})\n        //     }\n        // }\n\n        componentWillMount() {\n            this.setState({\n                loggedin: localStorage.getItem('token')\n            })\n        }\n\n        // async checktoken(){\n        //     if (this.props.token) {\n        //         axios.post(`${api_url}checktoken`, {\n        //             token: this.props.token\n        //         }).then(async res => {\n        //             const loadData = () => {\n        //                 this.props.updateToken({\n        //                     token: res.data.token\n        //                 });\n        //                 localStorage.setItem('token', res.data.token);\n        //             };\n        //             await loadData();\n        //             return true\n        //         })\n        //             .catch(async err => {\n        //                 await this.props.logout();\n        //                 return false;\n        //             })\n        //     }else{\n        //         await this.props.logout();\n        //         return false\n        //     }\n        // }\n\n        render() {\n            // new Promise((resolve, reject) => {\n            //     resolve(this.checktoken())\n            // }).then(check => {\n                if (this.state.loggedin) {\n                    return (\n                        <React.Fragment>\n                            <ComponentToProtect {...this.props} />\n                        </React.Fragment>\n                    );\n                } else {\n                    return <Error404/>\n                }\n\n            // });\n        }\n    }\n\n    const mapStateToProps = state => ({\n        token: state.user.token\n    });\n\n    return connect(mapStateToProps, {updateToken, logout})(CheckToken)\n};\n"]},"metadata":{},"sourceType":"module"}