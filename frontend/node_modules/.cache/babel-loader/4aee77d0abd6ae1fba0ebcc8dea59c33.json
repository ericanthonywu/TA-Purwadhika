{"ast":null,"code":"var _jsxFileName = \"/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/Dashboard.jsx\";\nimport React from \"react\";\nimport { MDBCol, MDBContainer, MDBRow } from \"mdbreact\";\nimport { connect } from \"react-redux\";\nimport Post from './template/Post';\nimport axios from 'axios';\nimport { api_url, backend_url } from \"../global\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport { logout } from \"../redux/actions\";\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.infiniteScroll = e => {\n      // console.log(e.target.scrollingElement.)\n      if (e.target.scrollingElement) {\n        if (e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop === e.target.scrollingElement.clientHeight) {\n          //Mentok di bawah\n          this.setState({\n            pagination: this.state.pagination + 10\n          }, () => {\n            axios.post(\"\".concat(api_url, \"dashboard\"), {\n              token: localStorage.getItem('token'),\n              offset: this.state.pagination\n            }).then(res => {\n              if (res.data.post.length) {\n                this.setState({\n                  loading: false,\n                  post: [...this.state.post, res.data.post]\n                });\n              }\n            }).catch(err => {\n              if (err.statusCode == 419) {\n                toast.error('Session Expired');\n                setTimeout(async () => {\n                  await this.props.logout();\n                  this.props.history.push('/login');\n                }, 1000);\n              } else {\n                toast.error('Error Connection, Please try again');\n              }\n            });\n          });\n        }\n      }\n    };\n\n    this.state = {\n      loading: true,\n      pagination: 0,\n      post: []\n    };\n  }\n\n  componentDidMount() {\n    const socket = socketio(backend_url, {\n      query: {\n        token: localStorage.getItem('token'),\n        offset: this.state.pagination\n      }\n    });\n    socket.emit('get post', {\n      token: localStorage.getItem('token'),\n      offset: this.state.pagination\n    });\n    socket.on('show post', post => {});\n    axios.post(\"\".concat(api_url, \"dashboard\"), {\n      token: localStorage.getItem('token'),\n      offset: 0\n    }).then(res => {\n      this.setState({\n        loading: false,\n        post: res.data.post\n      });\n    }).catch(err => {\n      if (err.statusCode == 419) {\n        toast.error('Session Expired');\n        setTimeout(async () => {\n          await this.props.logout();\n          this.props.history.push('/login');\n        }, 1000);\n      } else {\n        toast.error('Error Connection, Please try again');\n      }\n    });\n    document.addEventListener('scroll', this.infiniteScroll);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.infiniteScroll);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        paddingTop: 100\n      },\n      id: 'scroll-div',\n      onScroll: this.infiniteScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      className: \"container-loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-grow text-warning\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(\"div\", {\n      className: \"spinner-grow text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(\"div\", {\n      className: \"spinner-grow text-default\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Loading...\"))) : React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      size: 9,\n      className: \"home_dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.state.post.length ? this.state.post.map(o => {\n      return React.createElement(Post, Object.assign({\n        _id: o._id,\n        postusername: o.user.username,\n        posttime: moment(o.createdAt).fromNow(),\n        postprofilepicture: o.user.profilepicture,\n        postcaption: o.caption,\n        totalcomment: o.comments.length,\n        likeslist: o.like,\n        postlikes: o.like.length,\n        likestatus: o.like.some(e => e._id === this.props.id),\n        postimages: o.image,\n        comments: o.comments\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Upload Post to be shared to your friends! :)\")))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.user.token,\n    id: state.user._id\n  };\n};\n\nexport default connect(mapStateToProps, {\n  logout\n})(Dashboard);","map":{"version":3,"sources":["/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/Dashboard.jsx"],"names":["React","MDBCol","MDBContainer","MDBRow","connect","Post","axios","api_url","backend_url","moment","socketio","toast","ToastContainer","logout","Dashboard","Component","constructor","props","infiniteScroll","e","target","scrollingElement","scrollHeight","scrollTop","clientHeight","setState","pagination","state","post","token","localStorage","getItem","offset","then","res","data","length","loading","catch","err","statusCode","error","setTimeout","history","push","componentDidMount","socket","query","emit","on","document","addEventListener","componentWillUnmount","removeEventListener","render","paddingTop","map","o","_id","user","username","createdAt","fromNow","profilepicture","caption","comments","like","some","id","image","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\nimport {connect} from \"react-redux\";\nimport Post from './template/Post'\nimport axios from 'axios'\nimport {api_url, backend_url} from \"../global\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport {toast, ToastContainer} from 'react-toastify';\n\nimport {logout} from \"../redux/actions\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            pagination: 0,\n            post: []\n        }\n    }\n\n    componentDidMount() {\n        const socket = socketio(backend_url,{\n            query: {\n                token:localStorage.getItem('token'),\n                offset: this.state.pagination\n            }\n        });\n        socket.emit('get post',{\n            token: localStorage.getItem('token'),\n            offset: this.state.pagination\n        });\n        socket.on('show post',post => {\n\n        })\n        axios.post(`${api_url}dashboard`, {\n            token: localStorage.getItem('token'),\n            offset: 0\n        }).then(res => {\n            this.setState({\n                loading: false,\n                post: res.data.post\n            });\n        }).catch(err => {\n            if(err.statusCode == 419){\n                toast.error('Session Expired');\n                setTimeout(async () => {\n                    await this.props.logout();\n                    this.props.history.push('/login');\n                },1000);\n            }else {\n                toast.error('Error Connection, Please try again');\n            }\n        });\n        document.addEventListener('scroll', this.infiniteScroll)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('scroll', this.infiniteScroll);\n    }\n\n    infiniteScroll = (e) => {\n        // console.log(e.target.scrollingElement.)\n        if(e.target.scrollingElement) {\n            if ((e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop) === e.target.scrollingElement.clientHeight) { //Mentok di bawah\n                this.setState({\n                    pagination: this.state.pagination + 10\n                },() => {\n                    axios.post(`${api_url}dashboard`, {\n                        token: localStorage.getItem('token'),\n                        offset: this.state.pagination\n                    }).then(res => {\n                        if(res.data.post.length) {\n                            this.setState({\n                                loading: false,\n                                post: [...this.state.post, res.data.post]\n                            });\n                        }\n                    }).catch(err => {\n                        if(err.statusCode == 419){\n                            toast.error('Session Expired');\n                            setTimeout(async () => {\n                                await this.props.logout();\n                                this.props.history.push('/login');\n                            },1000);\n                        }else {\n                            toast.error('Error Connection, Please try again');\n                        }\n                    });\n                });\n            }\n        }\n\n    };\n\n    render() {\n        return (\n            <>\n\n                <div style={{paddingTop: 100}} id={'scroll-div'} onScroll={this.infiniteScroll}>\n                {this.state.loading\n                    ?\n                    <div className={\"container-loading\"}>\n                        <div className=\"spinner-grow text-warning\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-default\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                    :\n                    <MDBContainer>\n                        <MDBRow>\n                            <MDBCol size={9} className={\"home_dashboard\"}>\n                                <div className={\"post\"}>\n                                    {\n                                        this.state.post.length\n                                            ?\n                                        this.state.post.map(o => {\n                                            return (\n                                                <Post\n                                                    _id={o._id}\n                                                    postusername={o.user.username}\n                                                    posttime={moment(o.createdAt).fromNow()}\n                                                    postprofilepicture={o.user.profilepicture}\n                                                    postcaption={o.caption}\n                                                    totalcomment={o.comments.length}\n                                                    likeslist={o.like}\n                                                    postlikes={o.like.length}\n                                                    likestatus={o.like.some(e => e._id === this.props.id)}\n                                                    postimages={o.image}\n                                                    comments={o.comments}\n                                                    {...this.props}\n                                                />\n                                            )\n                                        })\n                                            :\n                                        <h1>Upload Post to be shared to your friends! :)</h1>\n                                    }\n                                </div>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                }\n            </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.user.token,\n        id: state.user._id\n    }\n};\nexport default connect(mapStateToProps,{logout})(Dashboard)\n"]},"metadata":{},"sourceType":"module"}