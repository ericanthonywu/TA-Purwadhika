{"ast":null,"code":"var _jsxFileName = \"/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/Dashboard.jsx\";\nimport React from \"react\";\nimport { MDBCol, MDBContainer, MDBRow } from \"mdbreact\";\nimport { connect } from \"react-redux\";\nimport Post from './template/Post';\nimport axios from 'axios';\nimport { api_url, backend_url } from \"../global\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport { logout } from \"../redux/actions\";\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.infiniteScroll = e => {\n      // console.log(e.target.scrollingElement.)\n      if (e.target.scrollingElement) {\n        if (e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop === e.target.scrollingElement.clientHeight) {\n          //Mentok di bawah\n          this.setState({\n            pagination: this.state.pagination + 10\n          }, () => {\n            axios.post(\"\".concat(api_url, \"dashboard\"), {\n              token: localStorage.getItem('token'),\n              offset: this.state.pagination\n            }).then(res => {\n              if (res.data.post.length) {\n                this.setState({\n                  loading: false,\n                  post: [...this.state.post, res.data.post]\n                });\n              }\n            }).catch(err => {\n              if (err.statusCode == 419) {\n                toast.error('Session Expired');\n                setTimeout(async () => {\n                  await this.props.logout();\n                  this.props.history.push('/login');\n                }, 1000);\n              } else {\n                toast.error('Error Connection, Please try again');\n              }\n            });\n          });\n        }\n      }\n    };\n\n    this.state = {\n      loading: true,\n      pagination: 0,\n      post: []\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('token')) {\n      const socket = socketio(backend_url, {\n        query: {\n          token: localStorage.getItem('token'),\n          offset: this.state.pagination\n        }\n      });\n      socket.emit('get post', {\n        token: localStorage.getItem('token'),\n        offset: this.state.pagination\n      });\n      axios.post(\"\".concat(api_url, \"dashboard\"), {\n        token: localStorage.getItem('token'),\n        offset: 0\n      }).then(res => {\n        this.setState({\n          loading: false,\n          post: res.data.post\n        });\n      }).catch(err => {\n        if (err.statusCode == 419) {\n          toast.error('Session Expired');\n          setTimeout(async () => {\n            await this.props.logout();\n            this.props.history.push('/login');\n          }, 1000);\n        } else {\n          toast.error('Error Connection, Please try again');\n        }\n      });\n      document.addEventListener('scroll', this.infiniteScroll);\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.infiniteScroll);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        paddingTop: 100\n      },\n      id: 'scroll-div',\n      onScroll: this.infiniteScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      className: \"container-loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-grow text-warning\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(\"div\", {\n      className: \"spinner-grow text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(\"div\", {\n      className: \"spinner-grow text-default\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Loading...\"))) : React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      size: 9,\n      className: \"home_dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.post.length ? this.state.post.map(o => {\n      return React.createElement(Post, Object.assign({\n        _id: o._id,\n        postusername: o.user.username,\n        posttime: moment(o.createdAt).fromNow(),\n        postprofilepicture: o.user.profilepicture,\n        postcaption: o.caption,\n        totalcomment: o.comments.length,\n        likeslist: o.like,\n        postlikes: o.like.length,\n        likestatus: o.like.some(e => e._id === this.props.id),\n        postimages: o.image,\n        comments: o.comments\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Upload Post to be shared to your friends! :)\")))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.user.token,\n    id: state.user._id\n  };\n};\n\nexport default connect(mapStateToProps, {\n  logout\n})(Dashboard);","map":{"version":3,"sources":["/Users/ericanthonywu/Projects/TA-Purwadhika/frontend/src/views/Dashboard.jsx"],"names":["React","MDBCol","MDBContainer","MDBRow","connect","Post","axios","api_url","backend_url","moment","socketio","toast","ToastContainer","logout","Dashboard","Component","constructor","props","infiniteScroll","e","target","scrollingElement","scrollHeight","scrollTop","clientHeight","setState","pagination","state","post","token","localStorage","getItem","offset","then","res","data","length","loading","catch","err","statusCode","error","setTimeout","history","push","componentDidMount","socket","query","emit","document","addEventListener","componentWillUnmount","removeEventListener","render","paddingTop","map","o","_id","user","username","createdAt","fromNow","profilepicture","caption","comments","like","some","id","image","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\nimport {connect} from \"react-redux\";\nimport Post from './template/Post'\nimport axios from 'axios'\nimport {api_url, backend_url} from \"../global\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport {toast, ToastContainer} from 'react-toastify';\n\nimport {logout} from \"../redux/actions\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            pagination: 0,\n            post: []\n        }\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem('token')) {\n            const socket = socketio(backend_url, {\n                query: {\n                    token: localStorage.getItem('token'),\n                    offset: this.state.pagination\n                }\n            });\n            socket.emit('get post', {\n                token: localStorage.getItem('token'),\n                offset: this.state.pagination\n            });\n            axios.post(`${api_url}dashboard`, {\n                token: localStorage.getItem('token'),\n                offset: 0\n            }).then(res => {\n                this.setState({\n                    loading: false,\n                    post: res.data.post\n                });\n            }).catch(err => {\n                if (err.statusCode == 419) {\n                    toast.error('Session Expired');\n                    setTimeout(async () => {\n                        await this.props.logout();\n                        this.props.history.push('/login');\n                    }, 1000);\n                } else {\n                    toast.error('Error Connection, Please try again');\n                }\n            });\n            document.addEventListener('scroll', this.infiniteScroll)\n        }else{\n            this.props.history.push('/login')\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('scroll', this.infiniteScroll);\n    }\n\n    infiniteScroll = (e) => {\n        // console.log(e.target.scrollingElement.)\n        if (e.target.scrollingElement) {\n            if ((e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop) === e.target.scrollingElement.clientHeight) { //Mentok di bawah\n                this.setState({\n                    pagination: this.state.pagination + 10\n                }, () => {\n                    axios.post(`${api_url}dashboard`, {\n                        token: localStorage.getItem('token'),\n                        offset: this.state.pagination\n                    }).then(res => {\n                        if (res.data.post.length) {\n                            this.setState({\n                                loading: false,\n                                post: [...this.state.post, res.data.post]\n                            });\n                        }\n                    }).catch(err => {\n                        if (err.statusCode == 419) {\n                            toast.error('Session Expired');\n                            setTimeout(async () => {\n                                await this.props.logout();\n                                this.props.history.push('/login');\n                            }, 1000);\n                        } else {\n                            toast.error('Error Connection, Please try again');\n                        }\n                    });\n                });\n            }\n        }\n\n    };\n\n    render() {\n        return (\n            <>\n\n                <div style={{paddingTop: 100}} id={'scroll-div'} onScroll={this.infiniteScroll}>\n                    {this.state.loading\n                        ?\n                        <div className={\"container-loading\"}>\n                            <div className=\"spinner-grow text-warning\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                            <div className=\"spinner-grow text-primary\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                            <div className=\"spinner-grow text-default\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n                        :\n                        <MDBContainer>\n                            <MDBRow>\n                                <MDBCol size={9} className={\"home_dashboard\"}>\n                                    <div className={\"post\"}>\n                                        {\n                                            this.state.post.length\n                                                ?\n                                                this.state.post.map(o => {\n                                                    return (\n                                                        <Post\n                                                            _id={o._id}\n                                                            postusername={o.user.username}\n                                                            posttime={moment(o.createdAt).fromNow()}\n                                                            postprofilepicture={o.user.profilepicture}\n                                                            postcaption={o.caption}\n                                                            totalcomment={o.comments.length}\n                                                            likeslist={o.like}\n                                                            postlikes={o.like.length}\n                                                            likestatus={o.like.some(e => e._id === this.props.id)}\n                                                            postimages={o.image}\n                                                            comments={o.comments}\n                                                            {...this.props}\n                                                        />\n                                                    )\n                                                })\n                                                :\n                                                <h1>Upload Post to be shared to your friends! :)</h1>\n                                        }\n                                    </div>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                    }\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.user.token,\n        id: state.user._id\n    }\n};\nexport default connect(mapStateToProps, {logout})(Dashboard)\n"]},"metadata":{},"sourceType":"module"}