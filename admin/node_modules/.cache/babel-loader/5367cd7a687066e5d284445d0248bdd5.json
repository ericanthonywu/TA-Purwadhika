{"ast":null,"code":"var _jsxFileName = \"/Users/ericanthonywu/Projects/TA-Purwadhika/admin/src/views/PostPage.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardText, MDBCardTitle, MDBCarousel, MDBCarouselInner, MDBCarouselItem, MDBContainer, MDBDataTable, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader, MDBView } from \"mdbreact\";\nimport Axios from \"axios\";\nimport { api_url, profile_url } from \"../global\";\nimport Datatable from 'react-data-table-component';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport { toast } from \"react-toastify\";\nimport DatePicker from 'react-date-picker';\nimport moment from \"moment\";\nimport { post_url } from \"../global\";\nconst swal = withReactContent(Swal);\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshTable = () => {\n      Axios.post(\"\".concat(api_url, \"posts\"), {\n        token: this.props.token || localStorage.getItem('token')\n      }).then(res => {\n        const data = res.data.data;\n        data.forEach((o, id) => {\n          data[id].no = id + 1;\n        });\n        this.setState({\n          data: data,\n          loading: false\n        });\n      });\n    };\n\n    this.toggle = () => this.setState({\n      postModal: !this.state.postModal\n    });\n\n    this.toggleHidePost = rows => React.createElement(MDBBtn, {\n      onClick: () => {\n        swal.fire({\n          title: \"Apakah anda yakin akan \".concat(!rows.ban ? \"hide\" : \"unhide\", \" post ini?\"),\n          text: \"Anda bisa \".concat(rows.ban ? \"unhide\" : \"hide\", \" post ini kembali\"),\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonText: \"Ya, \".concat(!rows.ban ? \"Hide\" : \"Unhide\", \" saja!\"),\n          cancelButtonText: 'Batalkan',\n          reverseButtons: true\n        }).then(res => {\n          if (res.value) {\n            Axios.post(\"\".concat(api_url, \"hidePost\"), {\n              token: this.props.token,\n              post: rows._id,\n              ban: !rows.ban\n            }).then(res => {\n              console.log(rows);\n              swal.fire(\"Success! Post telah di hide!\", '', 'success');\n              this.refreshTable();\n            });\n          }\n        });\n      },\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, !rows.ban ? \"Hide\" : \"Unhide\", \" Posts\");\n\n    this.state = {\n      data: [],\n      loading: true,\n      postModal: false,\n      username: \"\",\n      id: \"\",\n      suspendName: \"\",\n      image: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshTable();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(MDBModal, {\n      isOpen: this.state.postModal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(MDBModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Post Image\"), React.createElement(MDBModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(MDBCarousel, {\n      activeItem: 1,\n      length: this.state.image.length,\n      showControls: this.state.image.length > 1,\n      showIndicators: this.state.image.length > 1,\n      className: \"z-depth-1\",\n      interval: false,\n      slide: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(MDBCarouselInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.image.map((o, id) => {\n      return React.createElement(MDBCarouselItem, {\n        itemId: id + 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(MDBView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"d-block w-100\",\n        src: post_url + o,\n        alt: \"image \".concat(id + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })));\n    })))), React.createElement(MDBModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Close\"))), React.createElement(MDBCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(MDBCardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(MDBCardTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Posts Data\"), React.createElement(Datatable, {\n      columns: [{\n        name: 'No',\n        selector: 'no',\n        sortable: true,\n        width: \"60px\"\n      }, {\n        name: 'Image',\n        selector: 'image',\n        cell: row => React.createElement(MDBBtn, {\n          onClick: () => this.setState({\n            postModal: true,\n            image: row.image\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Show Post Image\")\n      }, {\n        name: 'Caption',\n        selector: 'caption',\n        sortable: true,\n        cell: row => React.createElement(\"div\", {\n          style: {\n            whiteSpace: \"pre-line\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, row.caption)\n      }, {\n        name: 'Posted By',\n        selector: 'user',\n        sortable: true,\n        cell: row => row.user.username\n      }, {\n        name: 'Action',\n        selector: '_id',\n        width: \"300px\",\n        cell: this.toggleHidePost\n      }],\n      data: this.state.data,\n      progressPending: this.state.loading,\n      progressComponent: React.createElement(\"div\", {\n        className: \"container-loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spinner-grow text-warning\",\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(\"div\", {\n        className: \"spinner-grow text-primary\",\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(\"div\", {\n        className: \"spinner-grow text-default\",\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Loading...\"))),\n      pagination: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapToStateProps = state => {\n  return {\n    token: state.user.token\n  };\n};\n\nexport default connect(mapToStateProps)(PostPage);","map":{"version":3,"sources":["/Users/ericanthonywu/Projects/TA-Purwadhika/admin/src/views/PostPage.jsx"],"names":["React","connect","MDBBtn","MDBCard","MDBCardBody","MDBCardText","MDBCardTitle","MDBCarousel","MDBCarouselInner","MDBCarouselItem","MDBContainer","MDBDataTable","MDBModal","MDBModalBody","MDBModalFooter","MDBModalHeader","MDBView","Axios","api_url","profile_url","Datatable","Swal","withReactContent","toast","DatePicker","moment","post_url","swal","PostPage","Component","constructor","props","refreshTable","post","token","localStorage","getItem","then","res","data","forEach","o","id","no","setState","loading","toggle","postModal","state","toggleHidePost","rows","fire","title","ban","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","value","_id","console","log","username","suspendName","image","componentDidMount","render","length","map","name","selector","sortable","width","cell","row","whiteSpace","caption","user","mapToStateProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardText,\n    MDBCardTitle, MDBCarousel, MDBCarouselInner, MDBCarouselItem,\n    MDBContainer,\n    MDBDataTable,\n    MDBModal, MDBModalBody, MDBModalFooter,\n    MDBModalHeader, MDBView\n} from \"mdbreact\";\nimport Axios from \"axios\";\nimport {api_url, profile_url} from \"../global\";\nimport Datatable from 'react-data-table-component'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport {toast} from \"react-toastify\";\nimport DatePicker from 'react-date-picker'\nimport moment from \"moment\";\nimport {post_url} from \"../global\";\n\nconst swal = withReactContent(Swal);\n\nclass PostPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            loading: true,\n            postModal: false,\n            username: \"\",\n            id: \"\",\n            suspendName: \"\",\n            image: []\n        }\n    }\n\n    componentDidMount() {\n        this.refreshTable();\n    };\n\n    refreshTable = () => {\n        Axios.post(`${api_url}posts`, {\n            token: this.props.token || localStorage.getItem('token')\n        }).then(res => {\n            const data = res.data.data;\n            data.forEach((o, id) => {\n                data[id].no = id + 1;\n            });\n            this.setState({\n                data: data,\n                loading: false\n            })\n        });\n    };\n\n    toggle = () => this.setState({\n        postModal: !this.state.postModal,\n    });\n\n    toggleHidePost = rows => <MDBBtn onClick={() => {\n        swal.fire({\n            title: `Apakah anda yakin akan ${!rows.ban ? \"hide\" : \"unhide\"} post ini?`,\n            text: `Anda bisa ${rows.ban ? \"unhide\" : \"hide\"} post ini kembali`,\n            type: 'warning',\n            showCancelButton: true,\n            confirmButtonText: `Ya, ${!rows.ban ? \"Hide\" : \"Unhide\"} saja!`,\n            cancelButtonText: 'Batalkan',\n            reverseButtons: true\n        }).then(res => {\n            if (res.value) {\n                Axios.post(`${api_url}hidePost`, {\n                    token: this.props.token,\n                    post: rows._id,\n                    ban: !rows.ban\n                }).then(res => {\n                    console.log(rows);\n                    swal.fire(`Success! Post telah di hide!`, '', 'success');\n                    this.refreshTable()\n                })\n            }\n        })\n    }} color={\"red\"}>{!rows.ban ? \"Hide\" : \"Unhide\"} Posts</MDBBtn>;\n\n    render() {\n        return (\n            <>\n                <MDBModal isOpen={this.state.postModal} toggle={this.toggle}>\n                    <MDBModalHeader toggle={this.toggle}>Post Image</MDBModalHeader>\n                    <MDBModalBody>\n                        <MDBCarousel\n                            activeItem={1}\n                            length={this.state.image.length}\n                            showControls={this.state.image.length > 1}\n                            showIndicators={this.state.image.length > 1}\n                            className=\"z-depth-1\"\n                            interval={false}\n                            slide\n                        >\n                            <MDBCarouselInner>\n                                {\n                                    this.state.image.map((o, id) => {\n                                        return (\n                                            <MDBCarouselItem itemId={id + 1}>\n                                                <MDBView>\n                                                    <img\n                                                        className=\"d-block w-100\"\n                                                        src={post_url + o}\n                                                        alt={`image ${id + 1}`}\n                                                    />\n                                                </MDBView>\n                                            </MDBCarouselItem>\n                                        )\n                                    })\n                                }\n                            </MDBCarouselInner>\n                        </MDBCarousel>\n                    </MDBModalBody>\n                    <MDBModalFooter>\n                        <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n                    </MDBModalFooter>\n                </MDBModal>\n                <MDBCard>\n                <MDBCardBody>\n                    <MDBCardTitle>Posts Data</MDBCardTitle>\n                    <Datatable\n                        columns={[\n                            {\n                                name: 'No',\n                                selector: 'no',\n                                sortable: true,\n                                width: \"60px\"\n                            },\n                            {\n                                name: 'Image',\n                                selector: 'image',\n                                cell: row => <MDBBtn onClick={() => this.setState({postModal: true, image: row.image})}>Show\n                                    Post Image</MDBBtn>\n                            },\n                            {\n                                name: 'Caption',\n                                selector: 'caption',\n                                sortable: true,\n                                cell: row => <div style={{whiteSpace: \"pre-line\"}}>{row.caption}</div>\n                            },\n                            {\n                                name: 'Posted By',\n                                selector: 'user',\n                                sortable: true,\n                                cell: row => row.user.username\n                            },\n                            {\n                                name: 'Action',\n                                selector: '_id',\n                                width: \"300px\",\n                                cell: this.toggleHidePost\n                            }\n                        ]}\n                        data={this.state.data}\n                        progressPending={this.state.loading}\n                        progressComponent={\n                            <div className={\"container-loading\"}>\n                                <div className=\"spinner-grow text-warning\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </div>\n                                <div className=\"spinner-grow text-primary\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </div>\n                                <div className=\"spinner-grow text-default\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </div>\n                            </div>\n                        }\n                        pagination\n                    />\n                </MDBCardBody>\n            </MDBCard>\n            </>\n        );\n    }\n}\n\nconst mapToStateProps = state => {\n    return {\n        token: state.user.token\n    }\n};\nexport default connect(mapToStateProps)(PostPage)\n"]},"metadata":{},"sourceType":"module"}